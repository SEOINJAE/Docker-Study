"" docker compose""
docker-compose.yml 이라는 파일을 활용해 compose를 구성

Ex)

version: '2'
services:
  db:
    image: mysql:5.7
    volumes:
      - ./mysql:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
wordpress:
  image: wordpress:latest
  volumes:
    - ./wp:/var/www/html
  ports:
    - "8000:80"
  restart: always
  environment:
    WORDPRESS_DB_HOST: db:3306
    WORDPRESS_DB_PASSWORD: wordpress

- up 명령어
# docker compose를 이용하여 mysql과 wordpress를 실행
docker-compose up -d


down 명령어
docker compose를 이용하여 mysql과 wordpress를 종료합니다.
# docker-compose down

-------------------------------------------------------


- version
# docker-compose.yml 파일의 명세 버전
# docker-compose.yml 버전에 따라 지원하는 도커 엔진 버전도 다름
version: '3'

- services
# 실행할 컨테이너 정의
# docker run --name django 과 같다고 생각할 수 있음
services:
  postgres:
  ....

  django:
  ......


- imgae
# 컨테이너에 사용할 이미지 이름과 태그
# 태그를 생략하면 latest
# 이미지가 없으면 자동으로 pull

services:
  django:
    image:django-sample


- ports
# 컨테이너와 연결할 포트(들)
# {호스트 포트}:{컨테이너 포트}

services:
  django:
  ......
  ports:
  -"8000:8000"


- environment
# 컨테이너에서 사용할 환경변수(들)
# {환경변수 이름} : {값}
services:
  mysql:
  ...
  environment:
    - MYSQL_ROOT_PASSWORD=somewordpress: '3'

- volumes
# 마운트하려는 디렉터리(들)
# {호스트 디렉터리}:{컨테이너 디렉터리}

services:
  django:
  ...
  volumes:
  - ./app:/app

-restart
# 재시작 정책
# restart: "no"
# restart: always
# restart: on-failure restart: unless-stopped

services:
  django:
  restart: always


-build
# 이미지를 자체 빌드 후 사용
# image 속성 대신 사용함
# 여기에 사용할 별도의 도커 파일이 필요함

django:
  build:
    context: .
    dockerfile: ./compose/django/Dockerfile-dev


-------------------------------------------------------

- up
# docker-compose.yml에 정의된 컨테이너를 실행

docker-compose up 
docker-compose up -d
# docker run의 -d 옵션과 동일


# 컨테이너를 새로 만들기
docker-compose up --force-recreate

# 도커 이미지를 다시 빌드(build로 선언했을 때만)
docker-compose up --build


-start
# 멈춘 컨테이너를 재개

docker-compose start

# wordpress 컨테이너만 재개
docker-compose start wordpress


- restart
# 컨테이너를 재시작
docker-compose restart

# wordpress 컨테이너만 재시작
docker-compose restart wordpress

- stop
# 컨테이너 멈춤
docker-compose stop

# wordpress 컨테이너만 멈춤
docker-compose stop wordpress


- down
# 컨테이너를 종료하고 삭제
docker-compose down


- logs
# 컨테이너의 로그
docker-compose logs

# 로그 follow
docker-compose logs -f

- ps
# 컨테이너 목록
docker-compose ps


- exec
# 실행 중인 컨테이너에서 명령어 실행
docker-compose exec {컨테이너 이름} {명령어}
docker-compose exec wordpress bash


- build
# 컨테이너 build 부분에 정의된 내용대로 빌드
# build로 선언된 컨테이너만 빌드됨
docker-compose build

# wordpress 컨테이너만 build
docker-compose build wordpress
