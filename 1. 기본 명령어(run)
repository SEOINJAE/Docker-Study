# run - 컨테이너 실행

docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]

-d
detached mode (백그라운드 모드)

-p
호스트와 컨테이너의 포트를 연결

-v
호스트와 컨테이너의 디렉토리를 연결

-e
컨테이너 내에서 사용할 환경변수 설정

--name
컨테이너 이름 설정

--rm
프로세스 종료시 컨테이너 자동 제거

-it
-i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션

--network
네트워크 연결



# ubuntu 20.04 컨테이너 만들기
docker run ubuntu:20.04

# /bin/bash가 지정되어 쉘이 실행되어야 함. 입력을 받을 수 있도록 -it 옵션 입력
# 추가적으로 프로세스가 종료되면 컨테이너가 자동으로 삭제되도록 --rm옵션도 추가
docker run --rm -it ubuntu:20.04 /bin/sh 


# 웹 어플리케이션 실행하기
# detached mode(백그라운드 모드)로 실행하기 위해 -d 옵션을 추가하고 -p 옵션을 추가하여 컨테이너 포트를 호스트의 포트로 연결했음.

브라우저를 열고 localhost:5678 에 접속

docker run --rm -p 5678:5678 hashicorp/http-echo -text="hello world"

컨트롤 + C 종료


#Redis 실행하기
docker run --rm -p 1234:6379 redis

$ telnet localhost 1234 # telnet이 설치되어 있다면..
set hello world
+OK
get hello
$5
world quit


# MySQL 실행하기
docker run -d -p 3306:3306 \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
  --name mysql \
  mysql:5.7

# MySQL 데이터베이스를 실행
# exec 명령어는 run 명령어와 달리 실행중인 도커 컨테이너에 접속할 때 사용

docker exec -it mysql mysql
create database wp CHARACTER SET utf8;
grant all privileges on wp.* to wp@'%' identified by 'wp';
flush privileges;
quit


# 워드프레스 블로그 실행하기
# 앞에서 만든 MySQL을 실행한 상태에서 생성, 웹브라우저 localhost:8080으로 접속

docker run -d -p 8080:80 \
  -e WORDPRESS_DB_HOST=host.docker.internal \
  -e WORDPRESS_DB_NAME=wp \
  -e WORDPRESS_DB_USER=wp \
  -e WORDPRESS_DB_PASSWORD=wp \
  wordpress